<?php
/**
 * Autogenerated by Thrift Compiler (0.8.0)
 *
 * DO NOT EDIT UNLESS YOU ARE SURE THAT YOU KNOW WHAT YOU ARE DOING
 *  @generated
 */
include_once $GLOBALS['THRIFT_ROOT'].'/Thrift.php';

include_once $GLOBALS['THRIFT_ROOT'].'/packages/base/base_types.php';

class curator_Record {
  static $_TSPEC;

  public $identifier = null;
  public $rawText = null;
  public $labelViews = null;
  public $clusterViews = null;
  public $parseViews = null;
  public $views = null;
  public $whitespaced = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'identifier',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'rawText',
          'type' => TType::STRING,
          ),
        3 => array(
          'var' => 'labelViews',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'base_Labeling',
            ),
          ),
        4 => array(
          'var' => 'clusterViews',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'base_Clustering',
            ),
          ),
        5 => array(
          'var' => 'parseViews',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'base_Forest',
            ),
          ),
        6 => array(
          'var' => 'views',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'base_View',
            ),
          ),
        7 => array(
          'var' => 'whitespaced',
          'type' => TType::BOOL,
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['rawText'])) {
        $this->rawText = $vals['rawText'];
      }
      if (isset($vals['labelViews'])) {
        $this->labelViews = $vals['labelViews'];
      }
      if (isset($vals['clusterViews'])) {
        $this->clusterViews = $vals['clusterViews'];
      }
      if (isset($vals['parseViews'])) {
        $this->parseViews = $vals['parseViews'];
      }
      if (isset($vals['views'])) {
        $this->views = $vals['views'];
      }
      if (isset($vals['whitespaced'])) {
        $this->whitespaced = $vals['whitespaced'];
      }
    }
  }

  public function getName() {
    return 'Record';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->rawText);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->labelViews = array();
            $_size0 = 0;
            $_ktype1 = 0;
            $_vtype2 = 0;
            $xfer += $input->readMapBegin($_ktype1, $_vtype2, $_size0);
            for ($_i4 = 0; $_i4 < $_size0; ++$_i4)
            {
              $key5 = '';
              $val6 = new base_Labeling();
              $xfer += $input->readString($key5);
              $val6 = new base_Labeling();
              $xfer += $val6->read($input);
              $this->labelViews[$key5] = $val6;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->clusterViews = array();
            $_size7 = 0;
            $_ktype8 = 0;
            $_vtype9 = 0;
            $xfer += $input->readMapBegin($_ktype8, $_vtype9, $_size7);
            for ($_i11 = 0; $_i11 < $_size7; ++$_i11)
            {
              $key12 = '';
              $val13 = new base_Clustering();
              $xfer += $input->readString($key12);
              $val13 = new base_Clustering();
              $xfer += $val13->read($input);
              $this->clusterViews[$key12] = $val13;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->parseViews = array();
            $_size14 = 0;
            $_ktype15 = 0;
            $_vtype16 = 0;
            $xfer += $input->readMapBegin($_ktype15, $_vtype16, $_size14);
            for ($_i18 = 0; $_i18 < $_size14; ++$_i18)
            {
              $key19 = '';
              $val20 = new base_Forest();
              $xfer += $input->readString($key19);
              $val20 = new base_Forest();
              $xfer += $val20->read($input);
              $this->parseViews[$key19] = $val20;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::MAP) {
            $this->views = array();
            $_size21 = 0;
            $_ktype22 = 0;
            $_vtype23 = 0;
            $xfer += $input->readMapBegin($_ktype22, $_vtype23, $_size21);
            for ($_i25 = 0; $_i25 < $_size21; ++$_i25)
            {
              $key26 = '';
              $val27 = new base_View();
              $xfer += $input->readString($key26);
              $val27 = new base_View();
              $xfer += $val27->read($input);
              $this->views[$key26] = $val27;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 7:
          if ($ftype == TType::BOOL) {
            $xfer += $input->readBool($this->whitespaced);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('Record');
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::STRING, 1);
      $xfer += $output->writeString($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->rawText !== null) {
      $xfer += $output->writeFieldBegin('rawText', TType::STRING, 2);
      $xfer += $output->writeString($this->rawText);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->labelViews !== null) {
      if (!is_array($this->labelViews)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('labelViews', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->labelViews));
        {
          foreach ($this->labelViews as $kiter28 => $viter29)
          {
            $xfer += $output->writeString($kiter28);
            $xfer += $viter29->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clusterViews !== null) {
      if (!is_array($this->clusterViews)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('clusterViews', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->clusterViews));
        {
          foreach ($this->clusterViews as $kiter30 => $viter31)
          {
            $xfer += $output->writeString($kiter30);
            $xfer += $viter31->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parseViews !== null) {
      if (!is_array($this->parseViews)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parseViews', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->parseViews));
        {
          foreach ($this->parseViews as $kiter32 => $viter33)
          {
            $xfer += $output->writeString($kiter32);
            $xfer += $viter33->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->views !== null) {
      if (!is_array($this->views)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('views', TType::MAP, 6);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->views));
        {
          foreach ($this->views as $kiter34 => $viter35)
          {
            $xfer += $output->writeString($kiter34);
            $xfer += $viter35->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->whitespaced !== null) {
      $xfer += $output->writeFieldBegin('whitespaced', TType::BOOL, 7);
      $xfer += $output->writeBool($this->whitespaced);
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

class curator_MultiRecord {
  static $_TSPEC;

  public $identifier = null;
  public $records = null;
  public $labelViews = null;
  public $clusterViews = null;
  public $parseViews = null;
  public $views = null;

  public function __construct($vals=null) {
    if (!isset(self::$_TSPEC)) {
      self::$_TSPEC = array(
        1 => array(
          'var' => 'identifier',
          'type' => TType::STRING,
          ),
        2 => array(
          'var' => 'records',
          'type' => TType::LST,
          'etype' => TType::STRING,
          'elem' => array(
            'type' => TType::STRING,
            ),
          ),
        3 => array(
          'var' => 'labelViews',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'base_Labeling',
            ),
          ),
        4 => array(
          'var' => 'clusterViews',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'base_Clustering',
            ),
          ),
        5 => array(
          'var' => 'parseViews',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'base_Forest',
            ),
          ),
        6 => array(
          'var' => 'views',
          'type' => TType::MAP,
          'ktype' => TType::STRING,
          'vtype' => TType::STRUCT,
          'key' => array(
            'type' => TType::STRING,
          ),
          'val' => array(
            'type' => TType::STRUCT,
            'class' => 'base_View',
            ),
          ),
        );
    }
    if (is_array($vals)) {
      if (isset($vals['identifier'])) {
        $this->identifier = $vals['identifier'];
      }
      if (isset($vals['records'])) {
        $this->records = $vals['records'];
      }
      if (isset($vals['labelViews'])) {
        $this->labelViews = $vals['labelViews'];
      }
      if (isset($vals['clusterViews'])) {
        $this->clusterViews = $vals['clusterViews'];
      }
      if (isset($vals['parseViews'])) {
        $this->parseViews = $vals['parseViews'];
      }
      if (isset($vals['views'])) {
        $this->views = $vals['views'];
      }
    }
  }

  public function getName() {
    return 'MultiRecord';
  }

  public function read($input)
  {
    $xfer = 0;
    $fname = null;
    $ftype = 0;
    $fid = 0;
    $xfer += $input->readStructBegin($fname);
    while (true)
    {
      $xfer += $input->readFieldBegin($fname, $ftype, $fid);
      if ($ftype == TType::STOP) {
        break;
      }
      switch ($fid)
      {
        case 1:
          if ($ftype == TType::STRING) {
            $xfer += $input->readString($this->identifier);
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 2:
          if ($ftype == TType::LST) {
            $this->records = array();
            $_size36 = 0;
            $_etype39 = 0;
            $xfer += $input->readListBegin($_etype39, $_size36);
            for ($_i40 = 0; $_i40 < $_size36; ++$_i40)
            {
              $elem41 = null;
              $xfer += $input->readString($elem41);
              $this->records []= $elem41;
            }
            $xfer += $input->readListEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 3:
          if ($ftype == TType::MAP) {
            $this->labelViews = array();
            $_size42 = 0;
            $_ktype43 = 0;
            $_vtype44 = 0;
            $xfer += $input->readMapBegin($_ktype43, $_vtype44, $_size42);
            for ($_i46 = 0; $_i46 < $_size42; ++$_i46)
            {
              $key47 = '';
              $val48 = new base_Labeling();
              $xfer += $input->readString($key47);
              $val48 = new base_Labeling();
              $xfer += $val48->read($input);
              $this->labelViews[$key47] = $val48;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 4:
          if ($ftype == TType::MAP) {
            $this->clusterViews = array();
            $_size49 = 0;
            $_ktype50 = 0;
            $_vtype51 = 0;
            $xfer += $input->readMapBegin($_ktype50, $_vtype51, $_size49);
            for ($_i53 = 0; $_i53 < $_size49; ++$_i53)
            {
              $key54 = '';
              $val55 = new base_Clustering();
              $xfer += $input->readString($key54);
              $val55 = new base_Clustering();
              $xfer += $val55->read($input);
              $this->clusterViews[$key54] = $val55;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 5:
          if ($ftype == TType::MAP) {
            $this->parseViews = array();
            $_size56 = 0;
            $_ktype57 = 0;
            $_vtype58 = 0;
            $xfer += $input->readMapBegin($_ktype57, $_vtype58, $_size56);
            for ($_i60 = 0; $_i60 < $_size56; ++$_i60)
            {
              $key61 = '';
              $val62 = new base_Forest();
              $xfer += $input->readString($key61);
              $val62 = new base_Forest();
              $xfer += $val62->read($input);
              $this->parseViews[$key61] = $val62;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        case 6:
          if ($ftype == TType::MAP) {
            $this->views = array();
            $_size63 = 0;
            $_ktype64 = 0;
            $_vtype65 = 0;
            $xfer += $input->readMapBegin($_ktype64, $_vtype65, $_size63);
            for ($_i67 = 0; $_i67 < $_size63; ++$_i67)
            {
              $key68 = '';
              $val69 = new base_View();
              $xfer += $input->readString($key68);
              $val69 = new base_View();
              $xfer += $val69->read($input);
              $this->views[$key68] = $val69;
            }
            $xfer += $input->readMapEnd();
          } else {
            $xfer += $input->skip($ftype);
          }
          break;
        default:
          $xfer += $input->skip($ftype);
          break;
      }
      $xfer += $input->readFieldEnd();
    }
    $xfer += $input->readStructEnd();
    return $xfer;
  }

  public function write($output) {
    $xfer = 0;
    $xfer += $output->writeStructBegin('MultiRecord');
    if ($this->identifier !== null) {
      $xfer += $output->writeFieldBegin('identifier', TType::STRING, 1);
      $xfer += $output->writeString($this->identifier);
      $xfer += $output->writeFieldEnd();
    }
    if ($this->records !== null) {
      if (!is_array($this->records)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('records', TType::LST, 2);
      {
        $output->writeListBegin(TType::STRING, count($this->records));
        {
          foreach ($this->records as $iter70)
          {
            $xfer += $output->writeString($iter70);
          }
        }
        $output->writeListEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->labelViews !== null) {
      if (!is_array($this->labelViews)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('labelViews', TType::MAP, 3);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->labelViews));
        {
          foreach ($this->labelViews as $kiter71 => $viter72)
          {
            $xfer += $output->writeString($kiter71);
            $xfer += $viter72->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->clusterViews !== null) {
      if (!is_array($this->clusterViews)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('clusterViews', TType::MAP, 4);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->clusterViews));
        {
          foreach ($this->clusterViews as $kiter73 => $viter74)
          {
            $xfer += $output->writeString($kiter73);
            $xfer += $viter74->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->parseViews !== null) {
      if (!is_array($this->parseViews)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('parseViews', TType::MAP, 5);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->parseViews));
        {
          foreach ($this->parseViews as $kiter75 => $viter76)
          {
            $xfer += $output->writeString($kiter75);
            $xfer += $viter76->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    if ($this->views !== null) {
      if (!is_array($this->views)) {
        throw new TProtocolException('Bad type in structure.', TProtocolException::INVALID_DATA);
      }
      $xfer += $output->writeFieldBegin('views', TType::MAP, 6);
      {
        $output->writeMapBegin(TType::STRING, TType::STRUCT, count($this->views));
        {
          foreach ($this->views as $kiter77 => $viter78)
          {
            $xfer += $output->writeString($kiter77);
            $xfer += $viter78->write($output);
          }
        }
        $output->writeMapEnd();
      }
      $xfer += $output->writeFieldEnd();
    }
    $xfer += $output->writeFieldStop();
    $xfer += $output->writeStructEnd();
    return $xfer;
  }

}

?>
